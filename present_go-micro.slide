Trying out go-micro
go modules (aka vgo) edition
8 Sep 2018

Loh Siu Yin
Technology Consultant, Beyond Broadcast LLP
siuyin@beyondbroadcast.com

* Motivation

- I wanted to try out Go Micro

- I also wanted to see how go modules (aka vgo) handles dependencies like gRPC and protocol buffers used by Go Micro.

I had issues before with gRPC, protocol buffers and dependency management tools managing the ./vendor folder

* Go Micro
.link https://github.com/micro/go-micro

- Service Discovery
- Load Balancing
- Message Encoding
- Sync Streaming
- Async Messaging


* Prerequisites

- go get github.com/micro/go-micro

- go get github.com/micro/protoc-gen-micro

- install protoc -- the protocol buffer compiler
  wget https://github.com/protocolbuffers/protobuf/releases/download/
    v3.6.1/protoc-3.6.1-linux-x86_64.zip 

  unzip, make executable, then copy protoc to a location in your PATH
  to check: protoc --version

- go get -u github.com/golang/protobuf/protoc-gen-go

* Wait a minute ...

* go modules (aka vgo)

- does not make use of imports found in $GOPATH/src

If it does, it would include what ever version is found there and that could break build dependencies

So how do we get started the go mod way?

- Use at least go 1.11 where modules experimental support is enabled

- Think of a name for your module. I'm going to use *gomicrotry* .

* Chicken and the egg

* go mod init

- needs go code to initialize a go.mod file.
- protoc, protoc-gen-go _and_ protoc-gen-micro are needed to generate the go stub code

---

You still need the protoc executable.

  wget https://github.com/protocolbuffers/protobuf/releases/download/
    v3.6.1/protoc-3.6.1-linux-x86_64.zip 

  unzip, make executable, then copy protoc to a location in your PATH
  to check: protoc --version

go get -u github.com/golang/protobuf/protoc-gen-*go*

go get github.com/micro/protoc-gen-*micro*

* Write a starter go.mod
file: go.mod

  module gomicrotry

We manually create this file at the root of out project folder.

The go tools look out for this file and will manage it for you when you run go build, go run, go get etc.

* Write protobuf IDL spec

file: proto/hello.proto

.code proto/hello.proto

* Generate the stub files

.play gen_stubs.sh

  -I : look for .proto files in these folders
  --micro_out : generete go micro stub files and output them there
  --go_out : generate grpc stub files and output them there

Inspect the output

.play ls_proto.sh


* Write the server
file: cmd/hello-server/main.go

.code cmd/hello-server/main.go /10 O/,/20 O/

Nothing special here except for the proto import.
Note it uses our package name *gomicrotry*.

* Define the Greeter type
.code cmd/hello-server/main.go /30 O/,/40 O/

We define here Greeter.Hello method.

Note we pass in pointers to both HelloRequest and HelloResponse.
This is the convention used by go-micro.

I don't normally pass in a pointer for HelloRequest as I do not intent to change the value of HelloRequest.

go-micro probably does this for zero-copy, performance reasons.

* func main()

.code cmd/hello-server/main.go /50 O/,/60 O/

  go build

and magic happens to go.mod


* Updated go.mod
.code go.mod

* Consul ?
go-micro uses consul for its service registry by default. This service registry is plugable and is defined during compile time.

Other service registries it can use include kubernetes, etcd, etcdv3, gossip, nats etc.

Visit link below for full list.
.link https://github.com/micro/go-plugins/tree/master/registry

Consul can be run in development mode thus:

  consul agent -dev


* Write the client
file: cmd/hello-client/main.go

.code cmd/hello-client/main.go /10 O/,/20 O/

As for the server, we import our protocol buffer stubs from the proto folder.

* client main()

.code cmd/hello-client/main.go /30 O/,/40 O/

Which port do we call? Which host?

That is the job of the service registry: consul, kubernetes etc.

* Demo: Service Discovery

- Run consul (make sure you install it first)

  consul agent -dev

- Build and run the server

  cd cmd/hello-server
  go build
  ./hello-server

- Build and run the client

  cd cmd/hello-client
  go build
  ./hello-client

* Demo: Load Balancing

- Run a second server

  cd cmd/hello-server
  ./hello-server

- Run the client

  cd cmd/hello-client
  ./hello-client

* What have we seen?

- go-micro is a nice, quite easy to use RPC framework

- It has built-in service discovery. While it defaults to consult, you can swap it out for others. It can even run with no external dependency if you use multicast DNS (mDNS).

- Built-in service load-balancing

---

- go modules pulls in and locks down dependencies in a go.mod file at the root folder of the project

- go get, go build and/or go run updates go.mod

- go modules require go 1.11 or above (previously you can use vgo with go get github.com/golang/vgo)

* Go Micro functions

* Get the command line tool

- go get github.com/micro/micro

The *micro* command line tool can be used to call service (long-running) or functions (one-shot).

  micro call <registered_name> <rpc_method> <args>
  eg.
  micro call greeter Greeter.Hello '{"name":"CLI caller"}'


file: call_service.sh
.play -edit call_service.sh

Try changing the name above and re-running.

* Function definition
file: cmd/hello-function/main.go

.code cmd/hello-function/main.go /10 O/,/20 O/

So far it looks pretty much the same as a service.

* Function main()

.code cmd/hello-function/main.go /30 O/,/40 O/

(2) is where the difference is. It is a micro.NewFunction and I have registered it under a different micro name of "greeter-func".


* Demo: Go Micro Functions

- Launch a function instance

  cd cmd/hello-function
  go build
  ./hello-function

- Invoke / call the function instance

  micro call greeter-func Greeter.Hello '{"name": "func caller"}'

---

As you will have seen, the function exits immediately after it has been called. 

I could not find any feature of the micro command line or the go-micro library for the function executable to be dynamically loaded and executed when it is called.

* go-micro asynchronous messaging

Go Micro has pub/sub as well:

" PubSub at the client/server level works much like RPC but for async comms. It uses the same encoding but rather than using the transport interface it uses the broker for messaging. This includes the ability to encode metadata into context which is passed through with messages. "

-- https://github.com/micro/examples/tree/master/pubsub

---

Looking through the example code, I find trying to squeeze messaging into a RPC world rather awkward.

I will stick to traditional messaging systems like NATS or NATS-Streaming.


* Presentation and code download

.link github.com/siuyin/present_go-micro
